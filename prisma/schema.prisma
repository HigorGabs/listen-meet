// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts Account[]
  sessions Session[]
  meetings Meeting[]
  apiConfig ApiConfig?

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum MeetingStatus {
  RECORDING
  UPLOADED
  TRANSCRIBING
  PROCESSING
  COMPLETED
  FAILED
}

model Meeting {
  id          String        @id @default(cuid())
  title       String
  description String?
  status      MeetingStatus @default(RECORDING)
  audioUrl    String?       @map("audio_url")
  duration    Int?          // em segundos
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  transcript Transcript?
  summary    Summary?
  chats      Chat[]

  @@map("meetings")
}

model Transcript {
  id        String   @id @default(cuid())
  content   String   @db.Text
  language  String?
  confidence Float?
  createdAt DateTime @default(now()) @map("created_at")
  
  meetingId String  @unique @map("meeting_id")
  meeting   Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)

  segments TranscriptSegment[]

  @@map("transcripts")
}

model TranscriptSegment {
  id         String @id @default(cuid())
  content    String @db.Text
  startTime  Float  @map("start_time") // em segundos
  endTime    Float  @map("end_time")   // em segundos
  confidence Float?
  speaker    String?

  transcriptId String     @map("transcript_id")
  transcript   Transcript @relation(fields: [transcriptId], references: [id], onDelete: Cascade)

  @@map("transcript_segments")
}

model Summary {
  id           String   @id @default(cuid())
  title        String
  overview     String   @db.Text
  keyPoints    String[] @map("key_points")
  actionItems  String[] @map("action_items")
  participants String[]
  topics       String[]
  createdAt    DateTime @default(now()) @map("created_at")
  
  meetingId String  @unique @map("meeting_id")
  meeting   Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)

  @@map("summaries")
}

model Chat {
  id        String   @id @default(cuid())
  question  String   @db.Text
  answer    String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  
  meetingId String  @map("meeting_id")
  meeting   Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)

  @@map("chats")
}

enum ApiProvider {
  GOOGLE_SPEECH
  GOOGLE_GEMINI
  GOOGLE_STORAGE
}

model ApiConfig {
  id        String   @id @default(cuid())
  userId    String   @unique @map("user_id")
  
  // Google Cloud Speech-to-Text
  googleCloudProjectId String? @map("google_cloud_project_id")
  googleCloudPrivateKey String? @map("google_cloud_private_key") @db.Text
  googleCloudClientEmail String? @map("google_cloud_client_email")
  
  // Google Gemini
  geminiApiKey String? @map("gemini_api_key")
  
  // Google Cloud Storage
  googleStorageBucket String? @map("google_storage_bucket")
  
  // Configuration status
  speechConfigured Boolean @default(false) @map("speech_configured")
  geminiConfigured Boolean @default(false) @map("gemini_configured")
  storageConfigured Boolean @default(false) @map("storage_configured")
  
  // Validation timestamps
  speechLastTested DateTime? @map("speech_last_tested")
  geminiLastTested DateTime? @map("gemini_last_tested")
  storageLastTested DateTime? @map("storage_last_tested")
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_configs")
}
